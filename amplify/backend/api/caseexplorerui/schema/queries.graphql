type Query {
  queryNetworkByUserInput(
    DataSources: [DataSource!]!,
    Keywords: String,
    Articles: String,
    Eclis: String,
    DegreesSources: Int!,
    DegreesTargets: Int!,
    DateStart: AWSDate!,
    DateEnd: AWSDate!,
    Instances: [String],
    Domains: [String],
    Doctypes: [DocType!]!
    attributesToFetch: NodeAttributes
  ): Network @function(name: "queryhandler-${env}")
  computeSubnetwork(
    nodes: [NodeInput!]!,
    edges: [EdgeInput!]!,
    maxNodes: Int
  ): Network @function(name: "subnetwork-${env}")
  computeNetworkStatistics(
    nodes: [NodeInput!]!,
    edges: [EdgeInput!]!
  ): AWSJSON @function(name: "networkstatistics")
  fetchNodeData(
    node: NodeInput!
    attributesToFetch: NodeAttributes
  ): Node @function(name: "datafetcher-${env}")
  batchFetchNodeData(
    nodes: [NodeInput!]!
    attributesToFetch: NodeAttributes,
  ): [Node] @function(name: "batchdatafetcher-${env}")
  calculateLayout(
    nodes: [NodeInput!]!,
    edges: [EdgeInput!]!,
    layoutName: String!,
    boundingBox: BoundingBoxInput,
  ): AWSJSON @function(name: "layoutcalculator-${env}")
  test(
    ecli: String
  ): Node @function(name: "test-${env}")
}
